/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package diary3;

import java.awt.event.KeyEvent;
import javax.swing.JEditorPane;

/**
 *
 * @author Mahe
 */
public class DocumentEditor extends JEditorPane {

    JFormattedString DOC = new JFormattedString();
    JPlainString CURRENTLY_EDITING;
    String SEL_FACE = "Times New Roman";
    String SEL_TYPE = "plain";
    String SEL_SIZE = "16";
    String SEL_COLOR = "black";

    /**
     * Creates new form DocumentEditor
     */
    public DocumentEditor() {
        initComponents();
        JPlainString n = new JPlainString("", SEL_FACE, SEL_TYPE, SEL_SIZE, SEL_COLOR);
        CURRENTLY_EDITING = n;
        DOC.addToken(CURRENTLY_EDITING);
//        setText(DOC.toString());
    }

    public void addToken() {
        JPlainString n = new JPlainString("", SEL_FACE, SEL_TYPE, SEL_SIZE, SEL_COLOR);
        CURRENTLY_EDITING = n;
        DOC.addToken(n);
        setText(DOC.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n' || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            System.out.println("Enter");
            CURRENTLY_EDITING.setString(CURRENTLY_EDITING.getString() + "<br>");
        } else if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            System.out.println("Backspc!");
        } else if (evt.getKeyChar() != 8) {
            System.out.println("Normal : " + evt.getKeyCode());
            CURRENTLY_EDITING.setString(CURRENTLY_EDITING.getString() + evt.getKeyChar());
        } else if (evt.getKeyChar() == 8) {
            JPlainString jp = DOC.getToken(DOC.countTokens() - 1);
            if (DOC.countTokens() < 2) {
                if (jp.getString().length() < 2) {
                    DOC.removeAll();
                    System.out.println("DOC.Size = " + DOC.countTokens());
                    JPlainString n = new JPlainString("", SEL_FACE, SEL_TYPE, SEL_SIZE, SEL_COLOR);
                    CURRENTLY_EDITING = n;
                    DOC.addToken(n);
                    setText(DOC.toString());
                } else {
                    if (jp.getString().endsWith("&nbsp")) {
                        jp.setString(jp.getString().substring(0, jp.getString().indexOf("&nbsp")));
                    } else {
                        jp.setString(jp.getString().substring(0, jp.getString().length() - 1));
                    }
                    CURRENTLY_EDITING = jp;
                }
            } else {
                if (jp.getString().length() < 2) {
                    DOC.removeToken(DOC.countTokens() - 1);
                    System.out.println("DOC.Size = " + DOC.countTokens());
                    CURRENTLY_EDITING = DOC.getToken(DOC.countTokens() - 1);
                } else {
                    if (jp.getString().endsWith("&nbsp")) {
                        jp.setString(jp.getString().substring(0, jp.getString().indexOf("&nbsp")));
                    } else {
                        jp.setString(jp.getString().substring(0, jp.getString().length() - 1));
                    }
                    CURRENTLY_EDITING = jp;
                }
            }
        } else {
            System.out.println(evt.getKeyCode());

        }
        setText(DOC.toString());
        repaint();
    }//GEN-LAST:event_formKeyTyped

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            System.out.println("Tab");
            CURRENTLY_EDITING.setString(CURRENTLY_EDITING.getString() + "&nbsp&nbsp&nbsp&nbsp");
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
         setText(DOC.toString());
    }//GEN-LAST:event_formKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    
    public void refresh() {
        setText(DOC.toString());
    }
}
